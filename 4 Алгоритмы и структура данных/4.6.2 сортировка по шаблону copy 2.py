# По прибытии на Марс грузового космического корабля робот-грузчик должен расставить прибывшие контейнеры в определённом порядке. 
# Контейнеры пронумерованы вразнобой, а номера могут повторяться. Нумерация может быть, например, такой:
# Прибыло 11 контейнеров:
# 2 3 1 3 2 4 6 7 9 2 19
# У робота-грузчика есть инструкция, шаблон, в котором указано, в каком порядке должны стоять контейнеры:
# 2 1 4 3 9 6
# Из этой инструкции следует, что сперва должны стоять все контейнеры с номером 2 (сколько бы их ни было на борту), 
# следом — все контейнеры с номером 1, дальше — все контейнеры с номером 4 — и так до конца шаблона-инструкции.
# Если же в грузовике окажутся контейнеры, не учтённые в инструкции, их надо поставить последними, в порядке возрастания.
# 2 3 1 3 2 4 6 7 9 2 19  # Номера контейнеров в грузовике.
# 2 1 4 3 9 6  # Шаблон-инструкция
# 2 2 2 1 4 3 3 9 6 7 19  # Результат работы робота-грузчика.
# Контейнеры 7 и 19 не были упомянуты в инструкции. 
# Они переставлены в конец результирующего массива 
# и отсортированы от меньшего к большему.
# И это правильно, так и надо.
# Ваша задача — написать программу, которая:
# будет принимать на вход массив для сортировки и массив-шаблон, в соответствии с которым должна быть выполнена сортировка;
# вернёт массив, отсортированный в соответствии с шаблоном.

# Формат ввода
# В первой строке передаётся количество чисел, которые нужно отсортировать, n. Оно не превосходит 1500.
# Во второй строке передаются n чисел, которые надо отсортировать. Значения этих чисел не превосходят 1000.
# В третьей строке передаётся длина массива-шаблона m. Длина массива не превосходит 1500.
# В четвёртой строке передаётся массив-шаблон, в соответствии с которым нужно отсортировать первый массив. Значения в этом массиве не превосходят 1000.
# В первом массиве гарантированно присутствуют все числа из массива-шаблона.

#Формат вывода
# Выведите в строку через пробел значения из первого массива, отсортированные в соответствии с шаблоном.


def sorting(row, temp):
    new_row = []
    other_elements = list(set(row).difference(temp))
    for i in temp:
        for a in row:
            if a == i and a in new_row:
                index = list.index(new_row, a)
                list.insert(new_row, index+1, a)
            elif a == i and a not in new_row:
                list.append(new_row, a)
    for i in temp:
        for a in other_elements:
            if a == i and a in other_elements:
                index = list.index(other_elements, a)
                list.insert(other_elements, index+1, a)
            elif a == i and a not in other_elements:
                list.append(other_elements, a)
    other_elements = sorted(other_elements)
    answer = [str(x) for x in new_row+other_elements]
    return answer
    
    
#    order = {num: i for i, num in enumerate(template)}
#    print(order)
#    print(order.get(x, float('inf')))
#    return sorted(nums, key=lambda x: (order.get(x, float('inf')), x))

# n  = int(input().strip())

row = [2, 4, 3, 5, 6, 0, 9, 8, 7, 7] #[int(i) for i in input().split()]
#row = [2, 3, 1, 3, 2, 4, 6, 7, 9, 2, 19] #[int(i) for i in input().split()]
# m = int(input().strip())
temp = [2, 4, 3, 5, 6, 0]
# temp = [2, 1, 4, 3, 9, 6] #list(map(int, input().split()))
print(' '.join(sorting(row, temp)))