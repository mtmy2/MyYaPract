# Марсоход передаёт на Землю массив с данными о концентрации марсия в почве. Массив отсортирован по возрастанию.
#На Земле учёным нужно определить, есть ли в массиве определённая концентрация марсия. Для этого им нужна программа, которая отыскивает в массиве заданную концентрацию — целевое значение.
#Если в массиве есть целевое значение, программа должна вернуть индекс первого такого элемента, в котором хранится это значение.
#Если целевого значения в массиве нет, программа должна вернуть индекс, под которым это значение могло бы располагаться в массиве.
#Таким образом, задача — найти индекс целевого значения в отсортированном массиве или определить индекс, на котором могло бы быть это значение.
#Напишите программу, которая принимает на вход массив и целевое значение, а возвращает индекс массива, где находится или должно находиться целевое значение.
#Формат ввода
#Первая строка — массив целых чисел через пробел.
#Вторая строка — искомое значение.
#Формат вывода
#Целое число: индекс искомого значения в существующем массиве, если оно там есть, или индекс, на котором это значение должно оказаться, если его нет в массиве.


def find_value(val, dat):
    
    #list.insert(dat, 0, str(0))
    #print(dat)
    left = 0
    # Правая граница (правый индекс) рассматриваемого набора элементов. 
    # В начале работы она равна индексу последнего элемента в списке.
    right = len(dat) - 1
    # Пока левая граница меньше правой или равна ей:
    finish = False
    while finish==False:
        # Находим в наборе элементов индекс среднего элемента.
        mid = (left + right) // 2
        # Если элемент с этим индексом равен искомому, возвращаем его индекс.
        if int(dat[mid]) == val:
            finish = True
            return mid
        if int(dat[mid]) != val and right == left+1:
            finish = True
            return left+1
        if val < int(dat[0]):
            finish = True
            return 0
        if val > int(dat[len(dat) - 1]):
            finish = True
            return len(dat)
        
        # Если средний элемент меньше искомого...
        if int(dat[mid]) < val:
            # ...то изменяем левую границу поиска:
            left = mid
        # Если средний элемент больше искомого...
        else:
            # ...то изменяем правую границу поиска:
            right = mid
    # Если левая граница оказалась больше правой, 
    # значит, элемент не найден. Возвращаем None.
    return None

value = 2
data = ['1', '5', '10', '11']
#data = input().split()
#int(input(value))
    
index = find_value(value, data)
print(index) 
#print(' '.join(data))

#with open('output.txt', 'w') as file_out:
#        file_out.write(index)