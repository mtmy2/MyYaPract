# При расчёте пространственной сложности не учитывается память, 
# занятая этим массивом.
mars_craters = [
    'Гусев', 'Ибрагимов', 'Королёв', 'Ломоносов', 'Мороз', 'Тихонравов'
]


def array_len(data):
    """Подсчёт количества элементов в массиве."""
    # При оценке пространственной сложности алгоритма
    # память, занятая массивом data, не учитывается.

    # При выполнении алгоритма создаётся переменная result, на это расходуется память. 
    # Этот расход учитывается при расчёте пространственной сложности.
    # В этом алгоритме всегда создаётся лишь одна переменная,
    # вне зависимости от размера входного массива data:
    result = len(data)
    return result


print(array_len(mars_craters))





mars_craters = [
    'Гусев', 'Ибрагимов', 'Королёв', 'Ломоносов', 'Мороз', 'Тихонравов'
]


def symbols_count_for_array_items(data):
    """Подсчёт количества символов в каждом элементе массива."""
    # При оценке пространственной сложности алгоритма
    # память, занятая массивом data, не учитывается.

    # Создаём список для хранения результата, он потребует места в памяти;
    # учтём это при подсчёте пространственной сложности.
    result = []

    for item in data:
        # Переменная item тоже займёт место в памяти, 
        # при подсчёте пространственной сложности учитываем и её тоже.

        # Добавляем в список новые элементы. 
        # Количество этих элементов зависит от длины входного массива.
        result.append(len(item))
    return result


print(symbols_count_for_array_items(mars_craters))



# Входной массив:
mars_craters = [
    'Гусев', 'Ибрагимов', 'Королёв', 'Ломоносов', 'Мороз', 'Тихонравов'
]


def pairwise_matching(data):
    """
    Создаёт список всех возможных пар,
    составленных из разных элементов входного массива.
    """
    result = []

    for departure_point in data:
        for destination_point in data:
            if destination_point != departure_point:
                result.append(departure_point+ ' - ' + destination_point)
    return result


print(pairwise_matching(mars_craters))





days_temp = [-1, -4, 8, -7, 3, 0, 1, -7, -7, 0, 0, -4, 1, 8, 1, -5, 4, 0, 7, 1]


# Передаём в функцию полный массив значений и границы исследуемого участка:
def calculate_positive(sequence, left, right):
    # Счётчик положительных значений на заданном участке:
    count = 0
    # Перебираем элементы на заданном участке массива
    # (значение right не входит в диапазон):
    for item in sequence[left:right]:
        # Если встретилось положительное значение...
        if item > 0:
            # ...увеличиваем значение счётчика.
            count += 1
    return count


print(calculate_positive(days_temp, 10, 19))