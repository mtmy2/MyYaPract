# Объявляем диапазон от 0 до 30
days = range(0, 30)
print('Тип данных:', type(days))
print('Печатаем последовательность:', days)
print('Элемент с индексом 29:', days[29])
print('Элемент с индексом 30:', days[30])

#Функция range() может принимать от одного до трёх аргументов:
#range(stop): генерирует числа от 0 до stop - 1.#

#range(100) сгенерирует числа от 0 до 99 включительно.
#range(start, stop): генерирует числа от start до stop - 1.

#range(50, 100) сгенерирует числа от 50 до 99 включительно. Объявления диапазонов range(0, 100) и range(100) вернут последовательности с одинаковым набором элементов.
#range(start, stop, step): генерирует числа от start до stop - 1 с шагом step.

#range(50, 100, 9) сгенерирует числа в пределах от 50 до 99 включительно с шагом 9:

#50, 59, 68, … 75, 86, 95. Последним значением будет 95.
#Диапазон range не хранит конкретные значения диапазона. Хранятся лишь правила, по которым можно вычислить конкретное значение, когда оно будет запрошено. 
#Именно по этой причине при печати диапазона не выводятся конкретные значения: их не запрашивали, а потому range не стал их вычислять. Значений нет — напечатать нечего. На печать выводятся лишь границы диапазона.

# Объявим диапазон с границами 10 и 30 и с шагом 4
any_values = range(10, 30, 4)
print('Первый элемент:', any_values[0])   # Печатаем первый элемент.
print('Четвёртый по счёту элемент:', any_values[3])   # Элемент с индексом 3.
print('Последний элемент:', any_values[-1])  # Первый элемент с конца.

print('Преобразуем диапазон в список:', list(range(5)))
print('Преобразуем диапазон в кортеж:', tuple(range(7)))


def planting_plan(rows):
     #rows_list = list(range(2, rows*2+2, 2))
    return list(range(2, rows*2+2, 2))



print(planting_plan(5))