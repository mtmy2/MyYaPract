info_string = 'Когда вы едите сельдерей, вы "сжигаете" калории.'

# Если вложенные кавычки не отличаются от обрамляющих, 
# строка превратится в несколько отдельных строк и возникнет ошибка.
#@ info_string = 'Когда вы окучиваете грядку, вы 'сжигаете' калории.'

# А кавычки-ёлочки Python воспринимает как обычный текстовый символ:
# внутри строки их можно применять как угодно, но обрамлять ими строку нельзя.
info_string = 'Да вы вообще всегда «сжигаете» калории.'


int_number = 100
# Преобразуем число в строку:
str_number = str(int_number)
print(str_number)  
# Будет напечатано: 100
print(type(str_number))  
# Будет напечатано: <class 'str'>



info_string = (         # Вся строка целиком - в скобках.
    'Когда картофель '  # Каждый фрагмент строки - в кавычках.
    'был впервые привезён в Европу, '
    'его выращивали исключительно как '
    'декоративное растение.'
)  # Закрывающая скобка - на отдельной строке: так удобнее читать код.

print(info_string)


#Обратите внимание, что при печати строк, заключённых в тройные кавычки, сохраняется разбиение по строкам.
оutput_string = '''Современная оранжевая морковь - 
это результат селекции. 
Древние морковки были фиолетовыми, 
жёлтыми или красными.'''
print(оutput_string)


lang_name = 'Python'
# P   y   t   h   o   n (строка - набор символов)
# 0   1   2   3   4   5 (значения индексов для каждого символа)

# Поиграем в слова?
print(lang_name[0] + lang_name[4] + lang_name[5] + lang_name[1])
# Будет выведено: Pony



lang_name = 'Python'
# P   y   t   h   o   n  (строка - набор символов).
# -6 -5  -4  -3  -2  -1  (значения отрицательных индексов для каждого символа).

# Поиграем в слова задом наперёд?
print(lang_name[-6] + lang_name[-2] + lang_name[-1] + lang_name[-5])

# Будет выведено: Pony


lang_name = 'Python'
# P   y   t   h   o   n (строка - набор символов).
# 0   1   2   3   4   5 (значения индексов для каждого символа).

# Напечатай одиннадцатый по счёту символ!
print(lang_name[10])

# Будет выведено: ... IndexError: string index out of range


example_str = 'Кабачки полезны для здоровья.'

# Напишите свой код здесь.
print(example_str[0])
print(example_str[10])
print(example_str[1])
print(example_str[-8])


status_string = 'Урожай ВЕЛИКОЛЕПЕН'
# Можно напечатать это сообщение строчными буквами:
print(str.lower(status_string))
# Будет напечатано: урожай великолепен

alarm_string = 'шелковица поражена болезнью!'
# Если есть проблемы, без текста в верхнем регистре не обойтись:
print(str.upper(alarm_string))
# Будет напечатано: ШЕЛКОВИЦА ПОРАЖЕНА БОЛЕЗНЬЮ!


harvest_string = 'сегодня ВЫ собрали 12 КГ огурцов'
print(str.capitalize(harvest_string))
# Вывод в терминал: Сегодня вы собрали 12 кг огурцов


gardener_name_string = 'садовод тоня'
print(str.title(gardener_name_string))
# Вывод в терминал: Садовод Тоня


inverted_string = 'зА СеЗоН СоБрАнО ОгУрЦоВ: 185'
print(str.swapcase(inverted_string))
# Вывод в терминал: За сЕзОн сОбРаНо оГуРцОв: 185


yield_weight = 'Сегодня вы собрали 500 граммов помидоров'
print(str.find(yield_weight, 'граммов'))
# Будет напечатано: 23

# Проверим, что это за 23 вернулось:
print(yield_weight[23])
# Будет напечатано: г (первый символ искомой подстроки)



tomato_motto = 'Помидоры полезны. Помидоры красивые и весёлые.'

cucumber_motto = str.replace(tomato_motto, 'Помидоры', 'Огурцы')
print(cucumber_motto)
# Будет напечатано: Огурцы полезны. Огурцы красивые и весёлые.

# Четвёртым параметром можно указать количество заменяемых значений.
cucumber_motto = str.replace(tomato_motto, 'Помидоры', 'Огурцы', 1)
print(cucumber_motto)
# Будет напечатано: Огурцы полезны. Помидоры красивые и весёлые.


garden_message = ' !! == Помидоры созрели! Урожай великолепен! == !! '
text = str.strip(garden_message, '=! ')
print(text)
# Будет напечатано: Помидоры созрели! Урожай великолепен



vegetables = 'Помидоры; Огурцы; Баклажаны; Перцы; Кабачки'
# Разделитель - точка с запятой и пробел: 
# разделитель может состоять из нескольких символов.
print(str.split(vegetables))

# Обратите внимание: комбинация "точка с запятой" удалена из списка.



vegetables = 'Помидоры; Огурцы; Баклажаны; Перцы; Кабачки'
# Разбиваем строку, не указав разделитель
print(str.split(vegetables))
# Вывод: ['Помидоры;', 'Огурцы;', 'Баклажаны;', 'Перцы;', 'Кабачки']


veggie_list = ['Помидоры', 'Огурцы', 'Баклажаны', 'Перцы', 'Кабачки']
# Разделитель - пробел.
print(str.join(' ', veggie_list))

# Разделитель - пробел, смайлик и пробел.
print(str.join(' ¯\_(ツ)_/¯ ', veggie_list))



tomatoes = 250
print('Вы собрали ' + str(tomatoes) + ' кг помидоров.')
# Будет напечатано: Вы собрали 250 кг помидоров.


tomatoes = 250
print('Вы собрали за день', tomatoes, 'кг помидоров.')
# Вывод в терминал: Вы собрали за день 250 кг помидоров.


print(str.format('{0} имеют {1} {2}.', 'огурцы', 'неповторимый', 'вкус'))
#                                         |           |             |
# Номера аргументов:                      0           1             2

# Будет напечатано: огурцы имеют неповторимый вкус.

# Можно переставить слова местами, изменив числа в фигурных скобках:
print(str.format('{2} имеют {0} {1}', 'огурцы', 'неповторимый', 'вкус'))
# Будет напечатано: вкус имеют огурцы неповторимый.

# Можно использовать не явные значения, а переменные:
first = 'кабачки'
second = 'вид'
third = 'ужасный'

print(str.format('{first} имеют {second} {third}.', first=first, second=second, third=third))
# Будет напечатано: кабачки имеют вид ужасный.

# Если значения в строке выводятся в том же порядке,
# в каком они перечислены в аргументах,
# число в фигурных скобках можно не указывать.
present = 'подарок'
print(str.format('Лучший {} на Новый год - это {}!', present, first))
# Будет напечатано: Лучший подарок на Новый год - это кабачки!


#Значения типа float можно выводить как есть, а можно преобразовать — например, округлить или пересчитать в проценты. Параметры, управляющие такими преобразованиями, пишут в фигурных скобках после вызова значения.
#{N} — вывести числовое значение N в исходном виде;
#{N:%} — преобразовать числовое значение N в проценты;
#{N:.1%} — преобразовать числовое значение N в проценты и округлить итог до одного десятичного знака — до десятых долей;
#{N:.3f} — округлить числовое значение N до трёх знаков после запятой — до тысячных долей.


tomatoes_yield = 10.564
fstring = f'За день вы собрали {tomatoes_yield} кг помидоров'

print(fstring)
# Вывод в терминал: За день вы собрали 10.564 кг помидоров.


weight = 0.539
# Округляем до второго знака (.2) за плавающей точкой (f) - .2f
print(f'Сегодня вы использовали {weight:.2f} кг удобрений.')
# Будет напечатано: Сегодня вы использовали 0.54 кг удобрений.

part_of_stocks = 0.6575649
# Преобразовать десятичную дробь в проценты (%)
# и округлить до двух знаков после запятой (.2) - .2%
print(f'От зимних запасов осталось {part_of_stocks:.2%}')
# Будет напечатано: От зимних запасов осталось 65.76%.

# Количество собранных помидоров.
tomatoes_picked = 250 
# Вес одного помидора в кг
weight_per_tomato_kg = 0.05 

# Арифметика прямо в f-строке:
print(f'За день вы собрали {tomatoes_picked * weight_per_tomato_kg:.2f} кг помидоров.')
# Вывод в терминал: За день вы собрали 12.50 кг помидоров.


name = 'Тоня'
print(f'Данные садовода {str.upper(name)} загружены.')
# Вывод в терминал: Данные садовода ТОНЯ загружены.


# Количество корзин с овощами, шт.
baskets = 462 
# Средний вес овощей в одной корзине, кг.
average_weight = 25
# Стоимость одного килограмма урожая, в монетах.
price_per_kg = 175 


# Допишите функцию, которая рассчитывает вес и стоимость урожая.
def calc(baskets, average_weight, price_per_kg):
    total_weight = baskets * average_weight
    total_price = total_weight * price_per_kg 
    return  total_weight, total_price

# Вызовите функцию calc() и обработайте вернувшееся значение.
answer = calc(baskets, average_weight, price_per_kg)
# Составьте f-строку и напечатайте её.
print(f'Общий вес урожая: {answer[0]} кг. Оценённая стоимость урожая: {answer[1]}.')