TRIM — удаляем подстроки в строке
Функция TRIM удаляет с обеих сторон строки наибольшую подстроку, которая содержит определённые символы. 
Базовый синтаксис функции такой: TRIM('строка', 'символы_подстроки').
Часто функцию TRIM используют, чтобы удалить лишние пробелы с начала и конца строки — для этого достаточно применить функцию с параметрами по умолчанию. 
В этом случае синтаксис функции будет такой: TRIM('строка').

SELECT TRIM('   Текст с лишними пробелами с двух сторон   '); 


Также TRIM используют, чтобы удалить сложную комбинацию символов. Например, чтобы удалить первую группу цифр в начале адреса, используя данные таблицы staff:

SELECT address AS address_full, TRIM(address, '1234567890') AS address_trimmed
FROM chinook.staff
LIMIT 3; 


Разберём ещё один пример. Такой запрос удалит направление в конце строки с адресом:

SELECT address AS address_full, TRIM(address, 'SNWE') AS address_trimmed
FROM chinook.staff
LIMIT 3; 


Результат работы функции зависит от регистра переданных символов:

SELECT 
    address AS address_full, 
    TRIM(address, '1234567890SNWE') AS address_trimmed_1, 
    TRIM(address, '1234567890sNwE') AS address_trimmed_2
FROM chinook.staff
LIMIT 3; 


Чтобы удалить символы только с одной стороны строки, также применяют функции LTRIM и RTRIM. Функция LTRIM удаляет символы слева, а функция RTRIM — справа. 
Общий синтаксис этих функций аналогичен TRIM.  
Например, нужно преобразовать номер телефона сотрудника из таблицы staff: с левой стороны удалить код страны, 
а с правой стороны — номер, оставив только код региона в круглых скобках:

SELECT phone, TRIM(LTRIM(RTRIM(phone, '-0123456789'), '+1')) AS phone_trimmed
FROM chinook.staff
LIMIT 3; 


REPLACE — меняем подстроку
Другую распространённую задачу — заменить один символ на другой — решают с помощью функции REPLACE. Например, 
она может заменить неправильные разделители или специфические символы при выборке данных. 
Общий синтаксис функции такой: REPLACE('строка', 'подстрока для замены', 'замещающая подстрока').
Чтобы заменить символ, в запросе функции прописывают строку вместе с двумя другими аргументами: сначала старые символы, которые нужно заменить, затем — новые символы.  

SELECT title, REPLACE(title, '&', 'and') AS title_corr
FROM chinook.album
WHERE title LIKE '%&%'
LIMIT 3; 



Функция SPLIT_PART разделяет строку по заданному символу-разделителю и выдаёт определённую *n*-подстроку, которую необходимо извлечь. 
Общий синтаксис функции такой: SPLIT_PART('строка', 'разделитель', 'номер элемента'). 
Например, фраза ‘Хорошо начинать по-новому’ состоит из трёх частей, разделённых пробелом, или из двух частей, если в качестве разделителя рассматривать дефис.
Нумерация выделенных элементов начинается с единицы, при этом положительные значения вернут номер элемента с начала строки, а отрицательные — с конца.  
Функцию часто используют при необходимости выделить из строки только одну её часть. Например, разделить фамилию, имя и отчество:

SELECT 
    SPLIT_PART('Петров Александр Александрович', ' ', 1) as surname,
    SPLIT_PART('Петров Александр Александрович', ' ', -2) as name,
    SPLIT_PART('Петров Александр Александрович', ' ', -1) as patronymic; 



Если нужно выделить подстроку, которая начинается с определённой позиции в исходной строке, используют функцию SUBSTR. Она извлекает необходимую информацию определённой длины с заданной позиции. 
Общий синтаксис такой: SUBSTR('строка', 'номер стартовой позиции' [, 'длина выделяемой подстроки']). 
'номер стартовой позиции' — это начало выделяемой подстроки. Последний аргумент функции — длина подстроки, которую необходимо выделить, — необязательный. 
Если он не задан, функция извлечёт подстроку с начальной позиции до конца исходной строки:

SELECT 
    SUBSTR('Петров Александр Александрович', 8) as first_and_middle_name,
    SUBSTR('Петров Александр Александрович', 8, 9) as first_name; 

STRPOS — подсчитываем начальную позицию первого вхождения подстроки в строке
В примерах выше подстроки выделяли на основании их начальной позиции. Однако не всегда стартовая позиция той или иной подстроки известна заранее — иногда её необходимо определить. Для этого используют функцию STRPOS. Она показывает начальную позицию первого вхождения подстроки в строке. Если такого вхождения нет, то функция вернёт 0. 
Общий синтаксис функции такой: STRPOS('строка', 'подстрока').

SELECT STRPOS('Петров Александр Александрович', 'Александр') as name_position; 



Функция чувствительна к регистру. 
Аналог функции STRPOS — функция POSITION, её синтаксис немного отличается: POSITION('подстрока' in 'строка').



Например, есть информация о заказе в интернет-магазине строительных материалов в таком виде: 

1. Фанера ФК 15 мм, 5 листов, заказ №3547 от 25.07.2023
2. Брусок строганный, 5х5, 5 шт, заказ №0008857 от 26.07.2023 


Создайте таблицу orders_example с необходимыми данными, используя запрос
CREATE TABLE orders_example (id SERIAL PRIMARY KEY, order_info VARCHAR(256));.
Создав таблицу, примените последовательно необходимые строковые функции:

CREATE TABLE orders_example (
    id SERIAL PRIMARY KEY,
    order_info VARCHAR(256)
);

INSERT INTO orders_example (order_info)
VALUES
    ('Фанера ФК 15 мм, 5 листов, заказ №3547 от 25.07.2023'),      
      ('Брусок строганный, 5х5, 5 шт, заказ №0008857 от 26.07.2023');
    
SELECT 
    order_info,
    LTRIM(SPLIT_PART(SUBSTR(order_info, STRPOS(order_info, '№')+1), ' ', 1), '№0') AS order_id
FROM orders_example; 

Фyнкция	Что делает
TRIM	Удаляет с обеих сторон строки наибольшую подстроку, которая содержит определённые символы.
LTRIM	Удаляет символы слева в строке.
RTRIM	Удаляет символы справа в строке.
REPLACE	Заменяет одну подстроку на другую.
SPLIT_PART	Разделяет строку по заданному символу-разделителю и выдаёт определённую n-подстроку, которую необходимо извлечь.
SUBSTR	Извлекает необходимую подстроку определённой длины с заданной позиции.
STRPOS
POSITION	Показывает начальную позицию первого вхождения подстроки в строке.