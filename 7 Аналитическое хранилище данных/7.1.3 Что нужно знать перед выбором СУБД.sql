Что нужно знать перед выбором СУБД
На выбор базы данных для решения той или иной задачи влияют множество факторов: способ организации данных, их количество и скорость прироста, стоимость БД, мультиплатформенность, наличие качественной поддержки и другое.
В первую очередь обратить внимание стоит на то, какие данные вы собираетесь хранить. Данные крайне разнообразны — и базы данных тоже. В этом уроке вы узнаете, как организация данных влияет на выбор СУБД.
Виды данных
В зависимости от степени строгости организации данные можно разделить на структурированные, полуструктурированные и неструктурированные.
В структурированных данных информация строго упорядочена по заранее заданной модели, поэтому с ней легко работать и ПО, и людям. Лучший пример — таблица со строками и столбцами, где столбцы определяют атрибуты данных, а строки — сами данные. К системам структурированных данных относятся, например, файлы Google Sheets и Microsoft Office Excel.
Структурированные данные встречаются, увы, крайне редко. Почти вся информация в мире не структурирована. Например, текстовые файлы, фото, видео и сообщения в социальных сетях. Их отличает беспорядочность организации информации.
Существует промежуточный тип — полуструктурированные данные. Извлечь информацию из них проще, чем из неструктурированных. Они далеки от строгих табличных моделей, но содержат определённые теги, которые могут разделять семантические элементы и реализовывать иерархии данных. Например, в языке HTML теги <head> и <body> выделяют заголовочный блок и тело страницы соответственно, а тег <title> выделяет семантический элемент «заголовок».
Ниже приведена таблица-шпаргалка с основными характеристиками описанных выше видов данных. В ней перечислены лишь некоторые примеры популярных БД и форматов хранения. В мире их существует, конечно же, больше. 
Структурированные	Неструктурированные	Полуструктурированные
Определение	Данные строго упорядочены по заранее заданной модели	Данные не упорядочены	Данные содержат определённые теги для разделения семантических элементов и реализации иерархии
Форматы хранения	XLSX, CSV	WAV, MP3, Ogg, MP4, WMV, JPEG, PNG	XML, JSON, YAML
СУБД	MySQL, Oracle, PostgreSQL	Amazon S3, Neo4j	Amazon S3, MongoDB, HBase, Cassandra, PostgreSQL, Neo4j
Методы анализа данных	Классификация, регрессия, кластеризация	Накопление, интеллектуальный анализ данных	Классификация, регрессия, кластеризация, накопление, интеллектуальный анализ данных
SQL и NoSQL базы данных
По способу структурирования, хранения и управления данными все БД можно разделить на два основных типа: реляционные (SQL) и нереляционные (NoSQL).
Схема делится на две части: реляционные (SQL) и нереляционные (NoSQL) БД. В первую категорию входят реляционные БД, во вторую — нереляционные с такими моделями хранения: «ключ—значение», графовые, документоориентированные, колоночные.
Реляционные БД (SQL)
Реляционные базы данных (от англ. relation — «отношение, зависимость, связь») предназначены для хранения структурированных данных. С одной из таких БД вы уже поработали в прошлых спринтах. Информация в таких БД хранится в табличном виде: столбцы содержат свойства объектов, строки — саму информацию об объектах. Связь между таблицами обеспечивается механизмом внешнего ключа. Для обращения к данным реляционные БД используют SQL-запросы. Популярные примеры — MySQL, Oracle DB, PostgreSQL.
Нереляционные БД (NoSQL)
Для хранения неструктурированных и полуструктурированных данных существуют нереляционные базы данных. Они ориентированы на работу с иерархичными данными с вложенными структурами. Такие БД используют отличные от SQL запросы, поэтому их называют NoSQL.
Нереляционные БД имеют разные модели хранения, каждая из которых оптимизирована под конкретный тип данных. Чуть позже в курсе вы изучите NoSQL базы данных подробнее, а пока кратко опишем самые популярные виды нереляционных БД:
«Ключ–значение».

СУБД этого типа хранят данные в виде совокупности пар «ключ–значение». Ключ — это уникальный идентификатор. И ключ, и значение могут быть как простыми, так и сложными составными объектами. Этот вид СУБД чаще всего применяется в качестве кешей для объектов. Примеры: Redis, Amazon DynamoDB, Oracle NoSQL Database.
Документоориентированные.

Эти СУБД работают со сгруппированными по коллекциям полуструктурированными документами. Документы могут иметь формат JSON, XML, BSON и др., то есть состоять из тегированных элементов. Эта модель хранения удобна для каталогов и систем управления контентом, поэтому документоориентированные СУБД чаще всего используются в CMS, издательском деле и документальном поиске. Примеры: MongoDB, Couchbase, Berkeley DB XML.
Графовые.

СУБД этого типа хранят данные в виде узлов и рёбер. Поскольку связь (ребро) — это отдельно хранящийся в памяти объект, обход графа, то есть переход от одной его вершины к другой в поисках свойств связей этих вершин, не требует дополнительных вычислений, в отличие от соединений в реляционных БД. Графовые СУБД поддерживают специальные языки запросов (Gremlin, SPARQL) и ACID-требования, которые вы уже разбирали. Эти СУБД помогают решать ориентированные на связи задачи, например, касающиеся построения маршрутов общественного транспорта, дорожных карт, связей в социальных сетях. Примеры: AllegroGraph, InfoGrid, Neo4j.
Колоночные.

Эти СУБД используют разреженную матрицу для хранения информации. В колоночных СУБД столбцы — это ключи. В таких системах сами значения хранятся в столбцах (колонках), представленных в отдельных файлах. Это позволяет хранить большое количество атрибутов в сжатом виде и значительно ускоряет выполнение аналитических запросов к базе данных. Кроме того, колоночные СУБД имеют временные метки, что делает их полезными для организации счётчиков, регистрации и обработки событий, связанных со временем (системы биржевой аналитики, IoT/IIoT-приложения и системы управления содержимым). Примеры: Vertica, ClickHouse, Greenplum.
Соедините вид NoSQL СУБД и область, в которой этот тип лучше всего применять.




Всем типам данных — по нереляционной БД за наш счёт!
Заберите с собой из этого урока важный вывод: не существует плохих или хороших баз данных — только подходящие и неподходящие для конкретной цели. Поэтому в первую очередь стоит определиться, для чего вам нужно хранилище данных.
Самое время вернуться к Алисе и подробно расспросить её о требованиях к хранилищу.
Марат
Алиса, подскажи, пожалуйста, а какие у нас источники? Это реляционные базы?
Алиса
Отличный вопрос, я его от тебя ждала! Вот модель данных источников:



Марат
Ага, получается, мы храним только структурированные данные. А их много?
Алиса
Пока что немного, но точно станет больше — нам надо это учесть!
Марат
Окей, становится понятнее. Мы строим хранилище для структурированных данных, поэтому взяли открытую реляционную базу, способную работать с большим количеством данных.
Алиса
Всё так! Вообще, если говорить точнее, Postgres — объектно-реляционная СУБД. У неё есть всякие объектно-ориентированные фишечки, добавляющие гибкости решению. Например, можно создавать пользовательские типы данных. А вот MySQL так не умеет ;)
Марат
Да, я видел это в материалах, что ты прислала. Пойду дочитаю.