Практика. Транзакции разных уровней изоляции
В этом практическом уроке вы потренируетесь создавать транзакции нужного уровня изоляции и выполните несколько запросов. Прежде чем перейти к заданиям, вспомните главное.
Чтобы обеспечить одновременную конкурентную работу транзакций, в БД есть уровни изоляции. Они определяют, в какой степени одна транзакция может видеть изменения, которые происходят в других транзакциях. 
В таблице собрали уровни изоляции от самого свободного до самого строгого:
Уровень изоляции	«Грязное» чтение	Неповторяемое чтение	Фантомное чтение	Аномалия сериализации
READ UNCOMMITED Чтение незафиксированных данных	Допускается, но не в PostgreSQL	Возможно	Возможно	Возможно
READ COMMITTED Чтение зафиксированных данных	Невозможно	Возможно	Возможно	Возможно
REPEATABLE READ Повторяемое чтение	Невозможно	Невозможно	Допускается, но не в PostgreSQL	Возможно
SERIALIZABLE Сериализуемость	Невозможно	Невозможно	Невозможно	Невозможно
Установить нужный уровень изоляции для транзакции можно несколькими способами:
Указать при старте.

BEGIN TRANSACTION ISOLATION LEVEL <*нужный_уровень_изоляции*>;
   
Задать командой SET TRANSACTION ISOLATION LEVEL внутри транзакции. Команда выполняется после старта, но до выполнения любых операций в рамках этой транзакции.

BEGIN;
    SET TRANSACTION ISOLATION LEVEL <*нужный_уровень_изоляции*>; 
Задания
В уроке два задания и два квиза. 
Вам понадобятся две таблицы: 
users — с именами пользователей и начальным балансом,
operations — со списком некоторых операций, которые выполнял пользователь. Ссылается на users по внешнему ключу по полю user_id.
Создайте эти таблицы:

DROP TABLE IF EXISTS users;
CREATE TABLE users (
    id INTEGER PRIMARY KEY,
    name VARCHAR,
    balance NUMERIC(10, 2)
);
DROP TABLE IF EXISTS operations;
CREATE TABLE operations(
    id SERIAL PRIMARY KEY,
    user_id INTEGER REFERENCES users(id),
    amount NUMERIC(10, 2)
); 
и добавьте в них данные:

INSERT INTO users (id, name, balance)
VALUES (1, 'User 1', 100.00),
       (2, 'User 2', 200.00),
       (3, 'User 3', 300.00),
       (4, 'User 4', 400.00),
       (5, 'User 5', 500.00);
INSERT INTO operations (user_id, amount)
VALUES 
    (1, 550.00),
    (2, 100.00),
    (2, 200.00),
    (3, 150.00),
    (4, 200.00),
    (4, 50.00),
    (5, 250.00); 


Задание 1 из 2
Подберите нужный уровень изоляции по условиям задачи ниже и напишите транзакцию, которая для каждого пользователя рассчитывает итоговый баланс — 
это сумма начального баланса из таблицы users плюс сумма по всем операциям из таблицы operations. 
И вносит новое значение баланса в таблицу users.
Транзакция должна быть изолирована от внешних изменений так, 
что даже подтверждённые во время её работы изменения в других транзакциях не должны влиять на вычисляемые значения. 
Аномалия сериализации маловероятна, поэтому выберите уровень изоляции, который её допускает и при этом не отменяет транзакцию.


BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
update users 
set balance = balance + new.new_balance
from (
    select 
    	o.user_id as id,
    	sum(o.amount) as new_balance
    from operations as o
    group by o.user_id) as new
where users.id = new.id; 
commit;


Итак, вы подготовили транзакцию.
Теперь сымитируем параллельную работу двух транзакций. Для начала верните данные таблицы users в начальное состояние.

DROP TABLE IF EXISTS users;
CREATE TABLE users (
    id INTEGER PRIMARY KEY,
    name VARCHAR,
    balance NUMERIC(10, 2)
);
INSERT INTO users (id, name, balance)
VALUES (1, 'User 1', 100.00),
       (2, 'User 2', 200.00),
       (3, 'User 3', 300.00),
       (4, 'User 4', 400.00),
       (5, 'User 5', 500.00); 
В первом окне выполните только строки для старта транзакции, которую вы написали в задании, и запрос. Таким образом, в первом окне открыта транзакция, которая не завершена, так как не был выполнен COMMIT. 

BEGIN;
    SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
    UPDATE users u
    SET balance = balance + new_balance
    FROM (
        SELECT user_id, SUM(amount) as new_balance
        FROM operations
        GROUP BY user_id
    ) o
    WHERE u.id = o.user_id;
 
Теперь откройте новое окно и выполните в нём два запроса:
Добавьте в таблицу users нового пользователя с id = 6, name = 'User 6' и значением баланса 100.
Добавьте в таблицу operations две строки с user_id = 6 и значением amount 100 и 200.

Задание 2 из 2
В честь дня рождения компании всем пользователям добавляют бонус в размере 10% от их итогового баланса.
Модифицируйте код транзакции, которую вы уже написали, добавьте запрос на изменение баланса пользователей, 
но измените уровень изоляции так, чтобы транзакция видела изменения, зафиксированные в других транзакциях.

-- транзакция из прошлого задания
BEGIN;
    SET TRANSACTION ISOLATION LEVEL READ COMMItTED;
    UPDATE users u
    SET balance = balance + new_balance
    FROM (
        SELECT user_id, SUM(amount) as new_balance
        FROM operations
        GROUP BY user_id
    ) o
    WHERE u.id = o.user_id;
    UPDATE users u
    SET balance = balance*1.1;
COMMIT;


Теперь возьмите обновлённый код транзакции и выполните его в такой же последовательности, как в прошлый раз:
Только строки для старта транзакции, которую вы написали, и первый запрос в транзакции.
В отдельном окне — запрос для добавления нового пользователя с id = 7, name = 'User 7' и со значением баланса 700. В таблицу operations добавьте запись для user_id = 7 с amount = 100.
Вернитесь в первое окно, выполните второй запрос и закройте транзакцию.
Проверьте полученные результаты в таблице users.
Вы можете написать код сами или воспользоваться кодом ниже.
Код транзакции


INSERT INTO users (id, name, balance)
VALUES (7, 'User 7', 700.00);

INSERT INTO operations (user_id, amount)
VALUES (7, 100.00);    
Что произойдёт c балансом пользователя с id = 7 после выполнения всех четырёх шагов?


Баланс пользователя с id = 7 не изменится и будет равен 700.
При уровне изоляции READ COMMITED транзакция увидит изменения внешней транзакции, и поэтому баланс изменится — сработает запрос в транзакции, который увеличит значение баланса на 10%.

Неправильный ответ
Пользователь с id = 7 не будет записан в таблицу users.
Изоляции транзакций не мешает другим транзакциям добавлять данные в таблицы.

Тоже правильный ответ
Баланс пользователя с id = 7 изменится и станет равен 770.
Транзакция увидит изменения внешней транзакции и увеличит значение баланса нового пользователя, также как и для всех остальных, на 10%.

После завершения транзакции баланс пользователя с id = 7 изменится и станет равен 880.
Транзакция увидит изменения внешней транзакции и увеличит баланс седьмого пользователя на 10%. Но так как этот пользователь был добавлен уже после выполнения первого запроса в транзакции, проведённые операции не будут учтены при начислении бонуса.

