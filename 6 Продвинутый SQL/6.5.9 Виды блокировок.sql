Виды блокировок. Блокировка строк
В прошлом уроке вы познакомились с блокировками и узнали, в каких ситуациях их применяют на практике. В этом уроке вы узнаете, как блокировки делятся по видам и режимам и разберёте режимы блокировок на уровне строк.
Понимание и правильное применение режимов блокировок поможет оптимизировать процесс обработки данных, а также повысить его стабильность за счёт защиты от сбоев.
Блокировки делятся по:
Степени строгости — определяет, насколько жёстко блокировка ограничивает доступ к ресурсу или данным: разделяемая блокировка (shared lock) и исключительная блокировка (exclusive lock).
Области действия — определяет объект, на который действует блокировка: строка, таблица и другие.
Рассмотрим каждый вид подробнее.
Разделяемая блокировка (shared lock). Позволяет другим транзакциям читать данные, но не позволяет изменять их, пока блокировка активна. Блокировки на чтение обычно разделяемые — это обеспечивает целостность данных при чтении.
Исключительная блокировка (exclusive lock). Позволяет только одной операции в определённый момент времени читать или изменять данные. Запрещает любой доступ к данным для других транзакций до тех пор, пока блокировка не снимется. Это означает, что ни одна другая транзакция не может ни читать, ни изменять данные, пока блокировка активна.
Разберём виды блокировок на примере.
У мебельного магазина «Плюшевый пуф» есть база данных склада. В ней ведут учёт поступления и продажи товаров. Менеджер по закупкам Ксюша заходит в базу, чтобы обновить количество стульев модели «Комфорт» — на склад поступила новая партия. В тот же момент менеджер по продажам Паша хочет узнать, сколько этих стульев на складе — у него покупатель.
Если применить исключительную блокировку на таблицу для Ксюши, Паше придётся ждать, пока Ксюша не закончит обновлять данные. Только после этого он сможет посмотреть обновлённое количество стульев на складе. Если же применить разделяемую блокировку, Паша сможет посмотреть данные, в то время как Ксюша их обновляет.
Блокировки по области действия делятся в зависимости от системы и контекста. В курсе рассмотрим две из них: блокировки строк и блокировки таблиц.
Блокировка на уровне таблицы. Блокирует всю таблицу целиком. Другие процессы не могут читать или изменять данные в этой таблице, пока текущая транзакция не завершится.
Разработчик может явно установить блокировку на уровне таблицы только внутри транзакции. По умолчанию такая блокировка действует до завершения или отката транзакции. Но если в транзакции есть точка сохранения и блокировка установлена после нее, при возврате к этой точке сохранения блокировка снимается. 
Блокировка на уровне строки. Ограничивает доступ только к конкретным строкам. Это удобно, когда нужно точечно изменить или посмотреть что-то конкретное, не мешая другим работать с остальными данными таблицы.
Например, есть таблица заказов orders, и в ней нужно обновить информацию о заказе с order_id = 5. Если использовать блокировку на уровне строки, для других транзакций заблокируется для изменения только этот заказ, а все остальные заказы останутся доступными.
Есть несколько режимов блокировок таблиц и строк — у каждого свои. С режимами блокировки таблиц вы подробно познакомитесь в отдельном уроке, а сейчас разберём режимы блокировки строк.
Режимы блокировки строк
Для блокировки строк есть четыре режима:
Режим	Как работает	Вид блокировки	Одновременная активность
FOR KEY SHARE	Разрешает другим транзакциям вносить изменения в строку, но только для не ключевых атрибутов — явно заданные первичные и внешние ключи менять нельзя. В PostgreSQL часто применяется автоматически при контроле соответствия внешних ключей.	Разделяемая	Несколько транзакций
FOR SHARE	Разрешает другим транзакциям читать строку. Вносить изменения нельзя.	Разделяемая	Несколько транзакций
FOR NO KEY UPDATE	Разрешает блокирующей транзакции изменять только те поля, которые не входят в явно заданные первичные и внешние ключи — при таком изменении внешние ключи не меняются.	
Исключительная	Одна транзакция
FOR UPDATE	Разрешает блокирующей транзакции полностью менять или удалять строки.	Исключительная	Одна транзакция
Команда UPDATE автоматически определяет для себя минимально подходящую блокировку. Если обновление не касается первичных ключевых полей, выбирает FOR NO KEY UPDATE. Если касается ключевых полей — FOR UPDATE.
Совместимость режимов
Совместимые режимы могут в разных запросах одновременно взаимодействовать с одним и тем же ресурсом — например, строкой или таблицей, не блокируя друг друга. Это позволяет повысить производительность системы. Если же наоборот — каждый запрос блокирует доступ к ресурсу для остальных, это замедляет работу системы.
Совместимость режимов собрали в таблице. Если на пересечении транзакций указано «да» — режимы совместимы и могут работать вместе в нескольких транзакциях. Если на пересечении транзакций указано «нет» — совместный доступ запрещён, значит, второй транзакции придётся ждать, пока не завершится первая, и блокировка не снимется. 
Транзакция (1)	FOR UPDATE	FOR NO KEY UPDATE	FOR SHARE	FOR KEY SHARE
Транзакция (2)				
FOR UPDATE	Нет	Нет	Нет	Нет
FOR NO KEY UPDATE	Нет	Нет	Нет	Да
FOR SHARE	Нет	Нет	Да	Да
FOR KEY SHARE	Нет	Да	Да	Да
Блокировки FOR UPDATE на уровне строк блокируют только запись в определённые строки, но никак не влияют на выполнение обычных SELECT запросов, не использующих блокировку.
Несмотря на то, что FOR NO KEY UPDATE — исключительная блокировка, она совместима с режимом FOR KEY SHARE. То есть транзакция с  блокировкой FOR KEY SHAREсможет читать данные строк, на которые наложена FOR NO KEY UPDATE.
Установить блокировку для всей таблицы можно только с помощью транзакции, а вот строку можно заблокировать одним запросом. Если блокировку установить без транзакции, только для отдельного запроса, действовать она будет только до завершения этого запроса.
Синтаксис запросов для блокировки строк вы изучите в следующем уроке.
Что произойдёт, если одна транзакция уже установила исключительную блокировку FOR UPDATE на строку данных в таблице, а затем вторая транзакция попытается установить аналогичную блокировку на ту же строку? Выберите единственный верный ответ.


Вторая транзакция получит блокировку.
Если у одной транзакции уже есть исключительная блокировка на строку, другая транзакция не получит блокировку на эту же строку, пока первая транзакция не завершится, и блокировка не снимется.

Обе транзакции заблокируются, пока конфликт не разрешится.
Если на строку уже наложена исключительная блокировка, вторая транзакция сможет наложить блокировку только после снятия первой. На работу первой транзакции попытки аналогичной исключительной блокировки не влияют.

Правильный ответ
Первая транзакция сохранит свою блокировку, а вторая — подождёт, пока блокировка снимется.
Когда одна транзакция уже наложила исключительную блокировку на строку, вторая транзакция подождёт, пока первая не завершится, и блокировка не снимется. Только тогда вторая транзакция получит доступ к этой строке.

Произойдёт ошибка во время выполнения.
Ошибки не будет, вторая транзакция подождёт, пока первая завершится, и блокировка снимется.
Какой режим блокировки строки использовать в PostgreSQL, когда нужно гарантировать, что ни одна другая транзакция не изменит и не заблокирует строку, пока текущая транзакция не закончит менять заблокированные данные в строке?


Правильный ответ
FOR UPDATE
Этот режим запрещает другим транзакциям изменять или блокировать строку до завершения текущей транзакции.

FOR NO KEY UPDATE
Этот режим блокирует строку и не даёт другим транзакциям вносить изменения, но он позволяет другим транзакциям блокировать строку, если они используют разделяемую блокировкуFOR KEY SHARE.

FOR SHARE
Этот режим не гарантирует, что другие транзакции не смогут блокировать строку с использованием других режимов блокировки.

FOR KEY SHARE
Это наименее строгий режим блокировки — он позволяет большинству других транзакций доступ к строке.

