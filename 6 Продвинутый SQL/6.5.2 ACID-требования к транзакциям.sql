ACID-требования к транзакциям
Чтобы обеспечить надёжность и целостность данных в БД, важно, чтобы транзакции выполнялись без сбоев. Для этого стандарт SQL устанавливает к транзакциям ряд требований. При разработке СУБД эти требования необходимо учитывать для создания механизма работы с данными. Для пользователей СУБД эти требования — неотъемлемые свойства каждой транзакции. 
Чтобы СУБД всегда успешно выполняли транзакции, они должны соответствовать требованиям ACID.
Расшифровка аббревиатуры ACID — иллюстрация текста ниже
Разберём эти требования подробнее.
Атомарность (A — Atomicity) — от слова «атом», в переводе с греческого «неделимый». Атомарность указывает на неделимость и цельность транзакции. Это значит, что все операции в транзакции либо успешно выполняются вместе, либо отменяются.
Согласованность (C — Consistency) — транзакция не разрушает взаимной согласованности данных. Это значит, что каждая успешная транзакция фиксирует только допустимые для этой БД результаты.
Продолжим на примере из предыдущего урока. Таблица account_transactions содержит столбец account_id, который является внешним ключом и ссылается на столбец id в таблице accounts. Допустим, запрос № 3 выглядит так:

INSERT INTO bank.account_transactions 
    (account_id, transaction_amount, transaction_type)
VALUES 
    (8, 500, 'W'); 
Здесь добавляется строка с account_id = 8 в таблицу account_transactions. При этом такого id нет в таблице accounts — поэтому такая операция невозможна. 
Благодаря внешнему ключу СУБД понимает, что этот запрос INSERT невалиден, и он приведёт к несогласованности данных: в таблице будет строка, у которой нет соответствующего значения в другой таблице.
По принципу согласованности такой запрос, как и вся транзакция, которая его содержит, отменится. Так сохранится целостность данных. Этот принцип гарантирует, что каждая успешная транзакция оставляет базу данных в состоянии, которое удовлетворяет всем заложенным правилам и ограничениям.
Не все аспекты бизнес-логики можно представить в виде простых ограничений, которые задают на уровне БД. Как в примере выше, когда средства сначала списывают с одного счёта, а затем зачисляют на другой. За согласованность данных в таких ситуациях отвечает инженер данных. Он решает, какие запросы объединить в единую транзакцию, а какие — нет.
Изолированность (I — Isolation) — обеспечивает независимость каждой транзакции от других. Каждая транзакция выполняется так, как если бы она была единственной операцией, которая происходит в системе. Это даёт надёжность обработки данных и помогает избежать проблем, которые могут возникнуть при одновременном доступе к общим данным. 
Например, со счёта с id = 1 на пустой счёт с id = 4  в рамках первой транзакции переводят 1000 условных единиц. Запрос увеличения баланса на счёте 4 уже выполнился и сейчас там 1000 у.е. В этот момент стартует вторая транзакция, которая хочет списать со счёта 4 в пользу счёта с id = 2 те же 1000 у.е. Если вторая транзакция видит изменения первой, она видит деньги на счёте и переводит их. Вторая транзакция успешно завершается — на счёте 4 теперь 0 у.е. В этот момент в первой транзакции происходит какая-то ошибка, и транзакция отменяется. При этом средства уже были списаны во второй транзакции — возникает конфликт данных.
На практике полной изолированности добиться сложно, поэтому есть понятие «уровни изоляции», когда транзакция изолируется не полностью. Вы подробно рассмотрите уровни изоляции в следующих уроках.
Долговечность или надёжность (D — Durability) — гарантирует, что если пришло подтверждение о выполнении транзакции, то изменения, вызванные этой транзакцией, уже не могут быть потеряны из-за каких-либо сбоев (например, отключения электропитания). Изменения гарантированно внесены в БД, а данные согласованы.
ACID-требования к транзакциям гарантируют целостность данных, возможность и безопасность одновременной работы, а также устойчивость к сбоям.
Какое из ACID-требований обеспечило корректную работу в приведённых ситуациях?  Сопоставьте пример и требование:
В банковской системе, когда клиент переводит деньги с одного счёта на другой, выполняются несколько SQL-запросов: списание с одного счёта и зачисление на другой. После успешной фиксации одной из подобных транзакций произошёл сбой в системе, и база данных перезагрузилась. После её восстановления сотрудники обнаружили, что, несмотря на сбой, все средства, которые были переведены, правильно отображаются на соответствующих счетах.
Атомарность
Долговечность гарантирует, что результаты транзакций, которые были зафиксированы до какого-либо сбоя, останутся неизменными после восстановления системы.
Так случилось, что разработчику пришлось вручную запустить транзакцию по проведению заказа. Но он ошибся в количестве товара, который купили, и указал значение больше того, сколько есть на складе. Транзакция должна была обновить остаток на складе так, что он стал бы меньше нуля. Но этого не произошло, и в базе данных по-прежнему правильные значения количества товара, соответствующие проведённым заказам.
Согласованность
Согласованность спасла разработчика. Создавая таблицу с остатками по складу для столбца с количеством товара, он добавил ограничение, что остаток не может быть меньше нуля. СУБД не позволила внести изменения, противоречащие ограничениям таблицы, и отменила транзакцию.
Система управления складом использует несколько SQL-запросов, которые фиксируют заказы и меняют количество товаров на складе. Эти запросы объединены в одну транзакцию. Во время выполнения одной такой транзакции часть запросов выполнилась, а другая завершилась неудачей. Выполнение транзакции было прервано. Но данные в базе остались неизменными, и несмотря на неудачную операцию, система продолжает корректно отображать состояние склада.
Атомарность
Атомарность обеспечивает согласованное и корректное состояние данных в БД склада — транзакция отменилась, и СУБД возвратила состояние данных к тому, которое было до старта транзакции.
Есть система бронирования билетов на самолет. Два клиента одновременно пытаются забронировать последний билет на один рейс.
Система начинает обрабатывать первую транзакцию бронирования, и пока она не будет завершена, второй клиент не может начать свою транзакцию — для него это выглядит так, как будто бы сайт немного завис и не отвечает. Как только первая транзакция завершена и билет забронирован, второй клиент получает сообщение о том, что билеты на этот рейс закончились. Возможного конфликта в условиях высокой конкуренции за ограниченное количество билетов не произошло.
Изолированность
Изолированность обеспечивает последовательное выполнение транзакций, которые запустили одновременно.


