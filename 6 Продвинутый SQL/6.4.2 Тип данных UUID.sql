Тип данных UUID
В предыдущих уроках курса вы использовали целые числа в качестве уникального идентификатора в таблицах (id). Однако бывает, что использовать целочисленный id невозможно. Разберём на примере.
Есть агрегатор такси — Taxi Online. Он работает с частными перевозчиками и таксопарками. У каждого таксопарка своя база данных. Каждый раз, когда в БД таксопарка добавляется и удаляется водитель, а также меняются его данные, сообщение об этом отправляется в БД агрегатора. 
У каждого водителя должен быть свой уникальный идентификатор, по которому его может определить и таксопарк, и агрегатор. В таком случае, если использовать обычные целочисленные значения, id водителей из разных таксопарков начнут совпадать, и их нельзя будет использовать в качестве идентификатора внутри Taxi Online. 
Чтобы избежать такой проблемы, в подобных ситуациях вместо целых чисел используют тип данных uuid.
uuid (англ. universally unique identifier, «универсальный уникальный идентификатор») — это 128-битное значение. Его генерирует специальный алгоритм таким образом, что это значение уникально не только внутри конкретной БД, но и среди всех существующих в мире баз данных. 
Вероятность повтора значений есть, но она настолько ничтожна, что ей можно пренебречь. Покажем на примере.
По данным «Википедии», ежегодный риск того, что конкретный человек попадёт под метеорит, оценивают в один шанс на 17 миллиардов — это вероятность около 0,00000000006 (
6
×
1
0
−
11
6×10 
−11
 ). Столько же шансов создать дубликат uuid — при генерации нескольких десятков триллионов uuid в год. Проще говоря, если генерировать 1 миллиард uuid в секунду в течение следующих 100 лет, вероятность создания только одного дубликата достигнет лишь 50%.
Такая уникальность uuid позволяет интегрировать данные из нескольких БД, применяя сквозной уникальный идентификатор, и создавать масштабные распределённые системы.
Посмотрите на адресную строку в вашем браузере: конец адреса состоит из букв, цифр и знаков -. Это строка формата uuid — на платформе Яндекс Практикума у идентификаторов страниц именно такой формат.
Формат uuid
Формат типа данных uuid закреплён определёнными стандартами. Есть несколько версий uuid. Они различаются способом генерации значения. Например, значение может генерироваться по метке текущего времени, MAC-адресу узла, на котором происходит генерация, и другими способами. 
Самая распространённая версия — четвёртая, uuid4, где значение генерируется случайным образом. 
Классическое текстовое представление значения формата uuid — серия из 32 шестнадцатеричных символов. Это могут быть цифры от 0 до 9 и латинские буквы от a до f. Эти символы разделены дефисами на пять групп по схеме «8-4-4-4-12».
Именно так выводится значение uuid в PostgreSQL: 
f01b5cba-bc79-4123-ba67-f03729f3c779.
Вот так может выглядеть таблица с данными водителей drivers в БД Taxi Online: 
guid	driver_name	driver_license	depot_id
f01b5cba-bc79-4123-ba67-f03729f3c779	Дмитров Геннадий Петрович	1234123123	7
30bfcb96-afc2-4819-bf97-7c56c863991c	Свиридов Михаил Владимирович	9876876876	10
Здесь с помощью значений типа uuid удалось организовать сквозной идентификатор для нескольких баз данных. Колонка с глобальным идентификатором называется guid — по аналогии с id и добавлением globally unique — «глобально уникальный».
Генерация uuid
Ранее при создании первичного ключа вы использовали тип serial. Он позволял вам не заботиться о том, как получить новое уникальное значение формата integer каждый раз при вставке новой строки. 
Если в качестве уникального идентификатора используют тип uuid, то, чтобы задать первичный ключ, применяют функцию GEN_RANDOM_UUID(). В PostgreSQL она доступна с 13-й версии.
Чтобы сгенерировать значение, можно использовать SELECT без других параметров:

SELECT GEN_RANDOM_UUID() 
При создании таблицы эту функцию часто используют как значение по умолчанию для одного из столбцов. 
Создайте схему taxi, а в ней таблицу drivers:

CREATE SCHEMA taxi;
CREATE TABLE taxi.drivers (
    guid uuid PRIMARY KEY DEFAULT GEN_RANDOM_UUID(),
    driver_name text,
    driver_license bigint,
    depot_id integer
); 
Теперь вы можете вставлять в таблицу строки без указания guid — например, для тех водителей, которые сотрудничают с Taxi Online напрямую, а не через таксопарк. Вот скрипт для вставки таких строк:

INSERT INTO taxi.drivers (driver_name, driver_license, depot_id) 
VALUES ('Иванов Сергей Олегович', 7777123123, 1); 
Также можно явно указать функцию для генерации guid в скрипте INSERT:

INSERT INTO taxi.drivers (guid, driver_name, driver_license, depot_id) 
VALUES (GEN_RANDOM_UUID(), 'Земцов Вячеслав Николаевич', '4444567567', NULL); 
Добавляя строки на основе сообщений от таксопарков, можно указать конкретное значение guid в одинарных кавычках:

INSERT INTO taxi.drivers (guid, driver_name, driver_license, depot_id) 
VALUES (
    '30bfcb96-afc2-4819-bf97-7c56c863991c',
    'Свиридов Михаил Владимирович', 
    9876876876, 
    2
); 
Вводить guid при вставке строк можно по-разному. Помимо стандартного варианта, можно писать так: 
В верхнем регистре — F01B5CBA-BC79-4123-BA67-F03729F3C779.
Стандартно в фигурных скобках — {f01b5cba-bc79-4123-ba67-f03729f3c779}.
Стандартно без - — f01b5cbabc794123ba67f03729f3c779.
Стандартно с -, который разделит строку на группы по четыре символа, —
f01b-5cba-bc79-4123-ba67-f037-29f3-c779.
Чтобы сгенерировать значения uuid в версиях PostgreSQL ранее 13-й, придётся обратиться к дополнительному модулю uuid-ossp. Подробно о том, как его собрать и применять, вы можете узнать в документации PostgreSQL.
Преимущества и недостатки uuid
У типа данных uuid много преимуществ:
Сгенерированное значение с очень высокой вероятностью будет уникальным.
Значение не повторяется в разных таблицах и в разных БД. Это позволяет интегрировать несколько баз данных с помощью сквозного идентификатора.
Значение невозможно подобрать. Это дополнительно защищает данные от несанкционированного доступа.
Значение занимает меньше памяти, чем строка аналогичной длины.
Преимущества uuid выглядят впечатляюще, так почему бы всегда не использовать его в качестве первичного ключа в таблицах? Рассказываем.
Во-первых, с uuid сложно работать людям. В небольших таблицах обычный id в формате целого числа просто запомнить, вбить от руки в запрос или передать кому-то. С uuid так легко не выйдет — чтобы не ошибиться, его придётся копировать.
Также есть данные, что применение uuid в качестве первичного ключа в больших таблицах может снижать производительность. Дело в том, что таблица хранится на диске в виде блоков, каждый из которых содержит ссылку на следующий блок. Значения uuid случайны и никак не связаны с порядком добавления в БД — поэтому число обращений к диску значительно возрастает, а это может затормозить работу.
Поэтому в одних ситуациях в качестве первичного ключа используют тип serial, а в других — uuid. Каждой задаче — свой инструмент.
Чтобы проще было всё проанализировать и запомнить, собрали особенности uuid в табличку:
Преимущества uuid	Недостатки uuid
Очень высокая вероятность уникальности значения.	Неудобно читать и сложно запомнить.
Можно интегрировать несколько БД с помощью сквозного идентификатора.	В качестве первичного ключа снижает производительность в больших таблицах.
Дополнительная защита данных.	
Занимает меньше памяти, чем строка аналогичной длины.


