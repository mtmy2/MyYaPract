1.
Для анализа данных разные сотрудники магазина Chinook регулярно просматривают сумму продаж за прошедшие годы. Так как новых продаж в предшествующих годах быть уже не может, для удобства работы со статистикой создайте материализованное представление total_year_income из двух столбцов: 
year — рассматриваемый год, тип данных integer.
total_income — сумма по столбцу total из таблицы invoice за указанный год, тип данных numeric.
Данные отсортируйте по году в порядке возрастания.

-- Напишите решение здесь.
create materialized view total_year_income as
    select
        extract(Year from invoice_date::date)::integer as year,
        sum(total)::numeric as total_income
    from
        chinook.invoice
    group By year
    order by year


2.
Вы работаете в стартапе интернет-сервиса «Мой тёзка», который позволит людям находить своих полных тёзок — людей с совпадающими фамилией, именем, отчеством. Just for fun!
Для запуска рекламной кампании стартап собирает по всей стране контактные данные людей, у которых ФИО образовано от одного имени. Например, Иванов Иван Иванович или Петров Пётр Петрович.
В БД компании уже есть данные по нескольким таким людям. Они хранятся в таблице namesakes. Ниже пример записи из этой таблицы.
id	name	phone	city
1	Иванов Иван Иванович	+79128541873	Екатеринбург
Также есть материализованное представление namesakes_count, в котором посчитано количество полных тёзок для каждого ФИО.
Сегодня утром радостный менеджер сообщил, что нашёл ещё одного Иванова Ивана Ивановича, согласного участвовать в рекламной кампании. Он из Москвы, его телефон +74952128506.
Ваша задача внести его данные в таблицу namesakes и сделать так, чтобы все, кто пользуются материализованным представлением namesakes_count, получали результаты с учётом этой новой строки.


-- Напишите решение здесь.
INSERT INTO namesakes 
    (name,
    phone,
    city)
VALUES
    ('Иванов Иван Иванович',
    '+74952128506',
    'Москва');

REFRESH MATERIALIZED VIEW namesakes_count;


3.
Концепция рекламной кампании сервиса «Мой тёзка» резко поменялась, теперь решили просто собрать людей из таблицы namesakes в одном месте и провести с ними интервью. Но не все готовы ехать в другой город для съёмок, а дополнительного бюджета на билеты у компании нет. Поэтому нужно найти город, в котором больше всего таких людей. 
К этой информации будут часто обращаться, поэтому создайте материализованное представление person_city_count, в котором должна храниться информация о городе city и количестве человек  person_count из таблицы namesakes в этом городе. Отсортируйте данные по убыванию количества человек в городе.
Старое представление namesakes_count уже не понадобится, удалите его.

-- Напишите решение здесь.
DROP MATERIALIZED view IF EXISTS namesakes_count CASCADE;

create materialized view person_city_count as
    select
        city,
        count(*) as person_count
    from namesakes
    group by city
    order by person_count desc;



