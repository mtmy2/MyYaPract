Продвинутые типы данных
Вы уже изучили базовые типы данных, но возможности PostgreSQL ими не ограничиваются. В этой СУБД есть множество других типов данных — некоторые из них схожи с другими СУБД, некоторые же есть только в PostgreSQL.
В этой теме вы будете изучать специфические типы данных. Их используют не так часто, как базовые, но именно знание этих типов поможет вам использовать возможности PostgreSQL на полную мощность. 
При этом внутри PostgreSQL нет никакого деления на «базовые» и «продвинутые» типы. 
В PostgreSQL встроено более сорока типов данных, а также можно создавать пользовательские типы. Не каждая база может похвастаться таким разнообразием — например, в SQLite поддерживаемые типы данных можно пересчитать по пальцам одной руки. 
Вот как разнообразие типов данных облегчает работу.
Прежде всего, это позволяет переложить на БД проверку вводимых значений на соответствие типу данных. Например, если вы объявили поле как дату, то не сможете записать туда значение '35.14.2020' — БД выдаст ошибку. 
Кроме того, для каждого типа данных есть множество операторов и встроенных функций, которые упрощают работу с ними. Например, если вы хотите извлечь из какой-то даты только месяц, вам не нужно задумываться о том, как это реализовать, — можно просто использовать функцию EXTRACT.
Ещё использование специфических типов данных позволяет экономить память. Например, тип данных uuid, с которым вы познакомитесь уже в следующем уроке, выглядит как строка, но при этом занимает меньше памяти, чем строка аналогичной длины.
Вспомним типы данных, которые вы уже изучили:
Для целых чисел — integer, bigint, smallint.
Для чисел с переменной точностью — real, double precision.
Для чисел с заданной точностью — numeric.
Для текстовых данных — text, character, character varying.
Для дат и времени — date, timestamp, timestamp without time zone.
Для логических значений — boolean.
Для последовательностей — serial, smallserial, bigserial.
А вот с кем вы познакомитесь в новой теме.
uuid — содержит 128-битные значения, уникальные не просто в пределах таблицы, а в пределах крупных распределённых систем. Используют для создания глобальных идентификаторов.
json — текстовый формат для хранения данных в виде ключ: значение. 
jsonb — специфический тип PostgreSQL, который хранит json в двоичном формате.
enum — перечисление, некоторый фиксированный упорядоченный набор значений. Также встречается в различных языках программирования.
Массивы — упорядоченные наборы элементов одного типа. Вы уже сталкивались с массивами при изучении Python, здесь же вы рассмотрите особенности работы с ними в PostgreSQL.
Пользовательские типы данных — мощный инструмент, который позволит вам создавать свои типы данных, чтобы упростить работу с базой и дополнительно проверять корректность вводимых данных.
Также есть несколько полезных типов данных, которые вы не будете изучать в рамках курса, но они пригодятся вам в работе. Кратко познакомьтесь с ними под катом и изучите подробнее самостоятельно.
Ещё немного продвинутых типов

xml — состоит из тегов и их значений. Его широко используют для обмена данными между разными системами через HTTP. Также применяют для хранения данных, чтобы затем передать их, например, какому-то сервису, который на основании этой разметки формирует для пользователя экранную форму документа.
bytea — двоичный тип данных. В двоичном виде можно хранить файлы различных форматов. Также его используют для криптографии, например для хранения хешированных паролей или данных, подписанных электронной подписью. Кроме того, этот тип пригодится при обмене данными с любыми системами и другими БД, у которых кодировка отличается от UTF-8.
interval — хранит интервал времени. С его помощью можно прибавить к любой дате, например, 5 часов или 3 года. Если вычесть одну дату из другой, также получится значение типа interval.
money — хранит денежные суммы с фиксированной дробной частью. Данные выводятся со значком валюты в соответствии с настройками БД.
Полный перечень типов данных и их подробное описание вы можете найти в документации PostgreSQL.
Теперь начнём знакомиться с продвинутыми типами поближе.

