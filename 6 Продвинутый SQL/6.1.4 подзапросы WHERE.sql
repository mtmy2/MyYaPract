/*В этом уроке расскажем, как писать запросы в WHERE. Разберём два примера: 
изучим пользователей с самыми крупными заказами
и отберём фильмы по двум условиям.
Нужно собрать всю информацию о пользователях, которые оформили 10 самых крупных заказов. Сначала нужно найти таких пользователей — этот запрос выведет идентификаторы пользователей с заказами на самую большую сумму.
*/


SELECT customer_id
FROM chinook.invoice
GROUP BY customer_id
ORDER BY SUM(total) DESC
LIMIT 10; 

/*Всего мы получили десять идентификаторов. 
Теперь эти данные можно использовать вместе с оператором WHERE. Такой подзапрос устроен точно так же, как и подзапрос с FROM. Нужно использовать полученные данные в качестве условия.
*/

SELECT *
FROM  chinook.client
WHERE customer_id IN (......) 

Можно написать окончательный запрос:

SELECT *
FROM chinook.client
WHERE 
    customer_id IN (
        SELECT customer_id
        FROM chinook.invoice
        GROUP BY customer_id
        ORDER BY SUM(total) DESC
        LIMIT 10
    ); 

В итоговую таблицу войдут данные пользователей с идентификаторами, отобранными подзапросом.


Вот они — десять пользователей, которые сделали самые крупные заказы.
Теперь более сложный пример. Нужно вычислить среднюю стоимость фильмов, отобранных по двум условиям:
их длительность не превышает среднюю длительность фильмов в базе,
в них снималось более 12 актёров и актрис.
Снова прибегнем к декомпозиции и разобьём задачу на подзадачи:
Найдём среднюю длительность всех фильмов в базе.
Найдём фильмы, в которых снималось более 12 актёров и актрис.
Отфильтруем таблицу, полученную в пункте 2, по средней длительности фильмов, которую мы рассчитали в пункте 1.
Вычислим среднюю стоимость отобранных фильмов.
Начнём с первой подзадачи: найдём среднюю длительность всех фильмов. Это можно сделать простым запросом:

SELECT AVG(length) 
FROM chinook.movie AS m; 

С этим числом будем сравнивать длительность фильмов.
Следующий этап: найдём фильмы, в которых снималось более 12 актёров и актрис.

SELECT m.film_id
FROM chinook.movie AS m 
LEFT JOIN chinook.film_actor AS fa ON m.film_id = fa.film_id
GROUP BY m.film_id
HAVING COUNT(actor_id) > 12; 


Мы соединили таблицу с фильмами, актёрами и актрисами, а затем сгруппировали фильмы по идентификатору. 
Среди них отобрали только те фильмы, в которых снималось более 12 актёров и актрис. 
Таблицу actor присоединять необязательно: в таблице film_actor и так есть идентификаторы актёров и актрис, которые можно сосчитать. 
В итоговую таблицу войдут только идентификаторы фильмов.
Итак, мы получили список фильмов, в которых снималось более 12 актёров и актрис. 
Осталось вычислить среднюю стоимость фильмов — сделаем это пока без добавления условий. 

SELECT AVG(rental_rate)
FROM chinook.movie AS m; 


Теперь можно указать WHERE и добавить два подзапроса:

SELECT AVG(rental_rate)
FROM chinook.movie AS m
WHERE 
    film_id IN (
        SELECT m.film_id
        FROM chinook.movie AS m 
        LEFT JOIN chinook.film_actor AS fa ON m.film_id = fa.film_id
        GROUP BY m.film_id
        HAVING COUNT(actor_id) > 12
    ) 
    AND length <= (
        SELECT AVG(length) 
        FROM chinook.movie AS m
    ); 


    Это как раз средняя стоимость фильмов, отобранных по двум заданным условиям. 
Задача решена. Благодаря декомпозиции писать подзапросы проще. И не забывайте про правила стиля, чтобы не запутаться в коде.