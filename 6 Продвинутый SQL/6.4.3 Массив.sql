Массив
До этого момента вы работали с таблицами, которые хранят только одно значение в каждой ячейке — это отвечает требованиям 1НФ. На практике бывают ситуации, когда есть смысл отступить от требований 1НФ и хранить в ячейке несколько значений.
Разберём на примере уже знакомого вам агрегатора Taxi Online. У каждого пассажира есть основной номер — к нему привязан аккаунт. Также пассажир может указать дополнительные номера: например, если заказывает такси для родственников или на случай плохой связи.
Основной номер телефона часто используют в запросах, по нему проходит авторизация, поэтому он хранится в отдельном поле таблицы с данными клиентов. 
Дополнительных номеров у пассажира может быть много, какие-то из них будут использоваться только один раз и никогда не встречаться в последующих заказах. Соберём дополнительные номера в отдельном поле в виде массива значений. Вот как будет выглядеть таблица clients:
id	client_name	phone	add_phones
1	Лесной Анатолий Игоревич	71112223344	{78885556677, 73335556677}
2	Полевой Александр Павлович	73332221144	{78881112233, 77772224477}
Вы уже знаете, что такое массивы, а также что они бывают одномерными и многомерными. Напомним главное и добавим деталей.
Массив — это упорядоченный набор элементов одного типа. 
Подчеркнём ключевые моменты:
Элементы строго одного типа — это значит, что нельзя хранить вперемешку, например, числовые и текстовые данные. Так, невозможно хранить в одном массиве и имя человека как строку, и его возраст как число.
Элементы упорядочены — это значит, что у каждого элемента есть порядковый номер (индекс), по которому к нему можно обращаться.
Массивы бывают одномерные и многомерные. 
Одномерный массив можно представить как некую последовательность. Каждый элемент в нём определяют с помощью одного индекса. Обратите внимание, что в PostgreSQL первый индекс равен 1, а не 0, как было в Python. 
Вот как выглядит одномерный массив символов:
Набор буквенных символов, над ними цифры — индексы символов
Многомерный массив — это буквально «массив из массивов». Так, двумерный массив — это массив одномерных массивов. Его можно представить как таблицу, а для обращения к элементу используют два индекса.
Три строки друг под другом из наборов буквенных символов. Каждая строка — одномерный массив. Сверху — цифры, индексы символов. Слева — цифры, индексы массивов напротив каждой строки (массива)
Соответственно, трёхмерный массив — это массив двумерных массивов и так далее.
В следующих уроках по массивам вы будете использовать понятия «размер» и «размерность». Зафиксируем, в чём различие этих понятий.
Размерность — это число измерений. В двумерном массиве размерность равна двум, в трёхмерном — трём и так далее. 
Размер — это количество элементов в массиве, или его длина. В многомерном массиве размер определяется отдельно по каждому измерению.
Пример 1. Одна строка из пяти ячеек — размерность = 1, размер = 5. Пример 2. Две строки по четыре ячейки в каждой — размерность = 2, размер №1 = 4, размер №2 = 2. 
Пример 3. Три строки по три ячейки в каждой — размерность = 3, размер №1 = 3, размер №2 = 2, размер №3 = 3

Размерность vs размер
Особенности массивов в PostgreSQL
Разберём особенности массивов в этой СУБД.
Типы данных. Элементами массивов могут быть любые типы данных: встроенные или определённые пользователем.
Индексы. В зависимости от языка программирования индекс первого элемента массива будет или 0, или 1. В PostgreSQL у первого элемента массива по умолчанию индекс 1.
Динамичность. Размер и размерность массива определяют не при его объявлении, а динамически. Это значит, что можно объявить одномерный массив из, скажем, десяти элементов, но если вы решите добавить туда одиннадцатый элемент, массив просто автоматически увеличится, не вернув ошибку.
Если вы объявите одномерный массив, вы сможете записать туда двумерный, трёхмерный или любой другой многомерный массив. Более того, в одной колонке в разных строках размерность массивов также может быть разной — одномерные, двумерные и прочие массивы могут храниться вперемешку.
Поэтому объявление размера и размерности массива имеет смысл только с точки зрения документирования таблицы, а на её использование не влияет.
Формат столбцов. Массивы в PostgreSQL используют в качестве формата столбцов для хранения результатов расчётов или набора простых второстепенных данных. Также есть смысл использовать массив для хранения наборов дискретных значений.
Разберёмся, какие данные удобнее хранить в массиве, а для каких нужна отдельная таблица. Например, молочный завод выпускает молоко и кефир. Молоко выпускают в объёмах 500, 1000 и 1500 мл, а кефир — 200 и 1000 мл. Можно создать таблицу products, одной из колонок в которой будет массив доступных объёмов упаковки.
Сырьё для молочных продуктов приходит от разных поставщиков, однако данные о том, какие поставщики есть для каждого продукта, нужно хранить в отдельной таблице. Во-первых, вариантов поставщиков гораздо больше, чем объёмов упаковки. Во-вторых, данные о поставщиках используют также в других ситуациях: при оформлении закупок, расчёте себестоимости и так далее.




Количество элементов массива определяет его размер. Размерность определяет число измерений массива. Порядковый номер элемента в массиве определяет индекс, а многомерный массив буквально — «массив массивов».


